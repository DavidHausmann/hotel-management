import { ComponentFixture, TestBed } from '@angular/core/testing';
import { HttpClientTestingModule } from '@angular/common/http/testing';
import { RouterTestingModule } from '@angular/router/testing';
import { Router } from '@angular/router';
import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
import { MatDialogModule, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';
import { MatSnackBarModule } from '@angular/material/snack-bar';

import { HotelGuestsPageComponent } from './hotel-guests-page.component';
import { EventEmitter } from '@angular/core';

describe('HotelGuestsPageComponent', () => {
  let component: HotelGuestsPageComponent;
  let fixture: ComponentFixture<HotelGuestsPageComponent>;

  // simple stubs for child components (ViewChild targets)
  class StubTable {
    filterName?: string | undefined;
    filterDocument?: string | undefined;
    filterPhone?: string | undefined;
    filterInHotel: boolean | null = null;
    filterReserved: boolean | null = null;
    loadPage = jasmine.createSpy('loadPage');
    clearFilters = jasmine.createSpy('clearFilters');
  }

  class StubFilterComp {
    startClose = jasmine.createSpy('startClose');
    // simulate outputs the real FilterComponent exposes
    applyFilters = new EventEmitter<any>();
    clearFilters = new EventEmitter<void>();
  }

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [
        HotelGuestsPageComponent,
        HttpClientTestingModule,
        RouterTestingModule,
        BrowserAnimationsModule,
        MatDialogModule,
        MatSnackBarModule,
      ],
      providers: [
        { provide: MatDialogRef, useValue: {} },
        { provide: MAT_DIALOG_DATA, useValue: {} },
      ],
    }).compileComponents();

    fixture = TestBed.createComponent(HotelGuestsPageComponent);
    component = fixture.componentInstance;
    // do not call detectChanges yet â€” attach stubs first to avoid timing issues
    const stubTable = new StubTable();
    const stubFilter = new StubFilterComp();
    component.table = stubTable as any;
    component.filterComp = stubFilter as any;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });

  it('should toggle filter panel visibility', () => {
    expect(component.showFilters).toBeFalse();
    component.toggleFilters();
    expect(component.showFilters).toBeTrue();
    component.toggleFilters();
    expect(component.showFilters).toBeFalse();
  });

  it('should navigate to home and add-guest routes', () => {
    const router = TestBed.inject(Router);
    spyOn(router, 'navigate');
    spyOn(router, 'navigateByUrl');

    component.goToHome();
    expect(router.navigate).toHaveBeenCalledWith(['/home']);

    component.goToAddGuest();
    expect(router.navigateByUrl).toHaveBeenCalledWith('/adicionar-hospede');
  });

  it('should apply filters and call table.loadPage and filter startClose', () => {
    // attach a fresh stub so we can inspect spies
    const stubTable = new StubTable();
    const stubFilter = new StubFilterComp();
    component.table = stubTable as any;
    component.filterComp = stubFilter as any;

    component.filterName = 'Alice';
    component.filterDocument = '123';
    component.filterPhone = '555';
    component.filterStatus = 'CHECKED_IN';

    component.onApplyFilters();

    expect((component.table as any).filterName).toBe('Alice');
    expect((component.table as any).filterDocument).toBe('123');
    expect((component.table as any).filterPhone).toBe('555');
    expect((component.table as any).filterInHotel).toBeTrue();
    expect((component.table as any).filterReserved).toBeNull();
    expect((component.table as any).loadPage).toHaveBeenCalledWith(0);
    expect((component.filterComp as any).startClose).toHaveBeenCalled();
  });

  it('should map RESERVED status to filterReserved true and filterInHotel null', () => {
    const stubTable = new StubTable();
    const stubFilter = new StubFilterComp();
    component.table = stubTable as any;
    component.filterComp = stubFilter as any;

    component.filterName = 'Carol';
    component.filterDocument = '321';
    component.filterPhone = '777';
    component.filterStatus = 'RESERVED';

    component.onApplyFilters();

    expect((component.table as any).filterName).toBe('Carol');
    expect((component.table as any).filterDocument).toBe('321');
    expect((component.table as any).filterPhone).toBe('777');
    expect((component.table as any).filterInHotel).toBeNull();
    expect((component.table as any).filterReserved).toBeTrue();
    expect((component.table as any).loadPage).toHaveBeenCalledWith(0);
    expect((component.filterComp as any).startClose).toHaveBeenCalled();
  });

  it('should clear filters and call table.clearFilters and filter startClose', () => {
    const stubTable = new StubTable();
    const stubFilter = new StubFilterComp();
    component.table = stubTable as any;
    component.filterComp = stubFilter as any;

    component.filterName = 'Bob';
    component.filterDocument = '999';
    component.filterPhone = '000';
    component.filterStatus = 'RESERVED';

    component.onClearFilters();

    expect(component.filterName).toBe('');
    expect(component.filterDocument).toBe('');
    expect(component.filterPhone).toBe('');
    expect(component.filterStatus).toBe('');
    expect((component.table as any).clearFilters).toHaveBeenCalled();
    expect((component.filterComp as any).startClose).toHaveBeenCalled();
  });

  it('should close filters when onCloseFilters is called', () => {
    component.showFilters = true;
    component.onCloseFilters();
    expect(component.showFilters).toBeFalse();
  });

  it('should respond to apply/clear by mapping filters and requesting pages', () => {
    const stubTable = new StubTable();
    const stubFilter = new StubFilterComp();
    component.table = stubTable as any;
    component.filterComp = stubFilter as any;

    // simulate the filter UI being visible and user-entered values
    component.showFilters = true;
    component.filterName = 'Dana';
    component.filterDocument = '444';
    component.filterPhone = '111';
    component.filterStatus = 'CHECKED_IN';

    // call the handlers as the template would when FilterComponent emits
    component.onApplyFilters();

    expect((component.table as any).filterName).toBe('Dana');
    expect((component.table as any).filterDocument).toBe('444');
    expect((component.table as any).filterPhone).toBe('111');
    expect((component.table as any).filterInHotel).toBeTrue();
    expect((component.table as any).loadPage).toHaveBeenCalledWith(0);

    // call clear to ensure table.clearFilters is invoked and locals reset
    component.onClearFilters();
    expect((component.table as any).clearFilters).toHaveBeenCalled();
    expect(component.filterName).toBe('');
    expect(component.filterDocument).toBe('');
    expect(component.filterPhone).toBe('');
    expect(component.filterStatus).toBe('');
  });
});
