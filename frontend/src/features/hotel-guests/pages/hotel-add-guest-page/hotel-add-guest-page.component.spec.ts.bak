import { ComponentFixture, TestBed } from '@angular/core/testing';
import { HttpClientTestingModule } from '@angular/common/http/testing';
import { RouterTestingModule } from '@angular/router/testing';
import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
import { MatDialogModule, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';
import { MatSnackBarModule } from '@angular/material/snack-bar';

import { HotelAddGuestPageComponent } from './hotel-add-guest-page.component';
import { HotelGuestsService } from '../../services/api/hotel-guests.service';
import { of, throwError } from 'rxjs';
import { MatSnackBar } from '@angular/material/snack-bar';
import { Router } from '@angular/router';

describe('HotelAddGuestPageComponent', () => {
  let component: HotelAddGuestPageComponent;
  let fixture: ComponentFixture<HotelAddGuestPageComponent>;

  beforeEach(async () => {
    const guestSvcSpy = jasmine.createSpyObj('HotelGuestsService', ['createGuest', 'updateGuest', 'getGuest']);
    guestSvcSpy.createGuest.and.returnValue(of({ id: 1, name: 'Test' }));

    await TestBed.configureTestingModule({
      imports: [
        HotelAddGuestPageComponent,
        HttpClientTestingModule,
        RouterTestingModule,
        BrowserAnimationsModule,
        MatDialogModule,
        MatSnackBarModule,
      ],
      providers: [
        { provide: MatDialogRef, useValue: {} },
        { provide: MAT_DIALOG_DATA, useValue: {} },
        { provide: HotelGuestsService, useValue: guestSvcSpy },
      ],
    }).compileComponents();

    fixture = TestBed.createComponent(HotelAddGuestPageComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });

  it('form should be invalid when empty and valid after filling', () => {
    const form = component.form;
    expect(form.valid).toBeFalse();
    // Clear strict validators for this unit test to focus on form wiring
    form.get('document')?.clearValidators();
    form.get('phone')?.clearValidators();
    form.updateValueAndValidity();

    form.get('name')?.setValue('Miguel');
    form.get('document')?.setValue('12345678901');
    form.get('phone')?.setValue('1199999');
    form.get('hasCar')?.setValue(true);

    expect(form.valid).toBeTrue();
  });

  it('should call createGuest on submit when not editing', () => {
    const guestSvc = TestBed.inject(HotelGuestsService) as any;

  // remove validators to avoid complex CPF/phone rules in unit test
  component.form.get('document')?.clearValidators();
  component.form.get('phone')?.clearValidators();
  component.form.updateValueAndValidity();

  component.form.get('name')?.setValue('Miguel');
  component.form.get('document')?.setValue('12345678901');
  component.form.get('phone')?.setValue('1199999');
  component.form.get('hasCar')?.setValue(false);

    component.onSubmit();

    expect(guestSvc.createGuest).toHaveBeenCalled();
  });

  it('should open snackbar and navigate on successful create', () => {
    const guestSvc = TestBed.inject(HotelGuestsService) as any;
  // spy directly on the instances the component actually uses to avoid provider-instance mismatches
  spyOn((component as any).snack, 'open');
  spyOn((component as any).router, 'navigate');

    // remove validators
    component.form.get('document')?.clearValidators();
    component.form.get('phone')?.clearValidators();
    component.form.updateValueAndValidity();

    component.form.get('name')?.setValue('Miguel');
    component.form.get('document')?.setValue('12345678901');
    component.form.get('phone')?.setValue('1199999');
    component.form.get('hasCar')?.setValue(false);

    component.onSubmit();

  expect(guestSvc.createGuest).toHaveBeenCalled();
  expect((component as any).snack.open).toHaveBeenCalledWith('HÃ³spede criado com sucesso', 'Fechar', { duration: 3000 });
  expect((component as any).router.navigate).toHaveBeenCalledWith(['/hospedes']);
  });

  it('should show error snackbar and keep submitting false on create error', () => {
    const guestSvc = TestBed.inject(HotelGuestsService) as any;
  // attach spy to the component's injected MatSnackBar instance
  spyOn((component as any).snack, 'open');

  guestSvc.createGuest.and.returnValue(throwError(() => ({ error: { message: 'boom' } })));

    // remove validators
    component.form.get('document')?.clearValidators();
    component.form.get('phone')?.clearValidators();
    component.form.updateValueAndValidity();

    component.form.get('name')?.setValue('Miguel');
    component.form.get('document')?.setValue('12345678901');
    component.form.get('phone')?.setValue('1199999');
    component.form.get('hasCar')?.setValue(false);

    component.onSubmit();

  expect((component as any).snack.open).toHaveBeenCalledWith('boom', 'Fechar', { duration: 5000 });
  expect(component.submitting).toBeFalse();
  });

  it('goToGuests should navigate to guests list', () => {
  // spy on the component's router instance
  spyOn((component as any).router, 'navigate');
    component.goToGuests();
  expect((component as any).router.navigate).toHaveBeenCalledWith(['/hospedes']);
  });
});
